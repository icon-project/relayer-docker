#!/bin/bash

set -euo pipefail

CONFIG_DIR="${CONFIG_DIR:-$HOME/relayer-docker-config}"
RELAYER_IMAGE_NAME="iconcommunity/centralized-relay"
RELAYER_REPO_NAME="icon-project/centralized-relay"
DASHBOARD_IMAGE_NAME="iconcommunity/relayer-admin-dashboard"
DASHBOARD_REPO_NAME="icon-project/relayer-admin-dashboard"
COSIGN_VERSION="v2.4.1"

find_docker_compose() {
    if command -v docker-compose &>/dev/null; then
        echo "docker-compose"
    elif docker compose version &>/dev/null; then
        echo "docker compose"
    else
        echo "Error: docker-compose or docker compose command not found."
        exit 1
    fi
}

DOCKER_COMPOSE_COMMAND=$(find_docker_compose)

# Function to verify a container image using cosign
verify_container() {
    local IMAGE_NAME="$1"
    local VERSION="$2"
    local REPO_NAME="$3"
    if [ -z "$VERSION" ]; then
        VERSION="stable"
    fi
    local PUBLIC_KEY_URL="https://github.com/${REPO_NAME}/releases/download/${VERSION}/cosign.pub"

    echo "Verifying container image: ${IMAGE_NAME}:${VERSION}"

    docker run --rm \
        ghcr.io/sigstore/cosign/cosign:${COSIGN_VERSION} verify \
        --key "${PUBLIC_KEY_URL}" \
        "${IMAGE_NAME}:${VERSION}"

    if [ $? -eq 0 ]; then
        echo "Verification successful for ${IMAGE_NAME}:${VERSION}"
    else
        echo "Verification failed for ${IMAGE_NAME}:${VERSION}"
        exit 1
    fi
}

update_image_version() {
    local SERVICE="$1"
    local VERSION="$2"
    if [ -z "$VERSION" ]; then
        VERSION="stable"
    fi
    echo "Updating image version for service '$SERVICE' to '$VERSION'..."
    sed -i "s/${SERVICE}_IMAGE_VERSION=.*/${SERVICE}_IMAGE_VERSION=${VERSION}/" .env
}

show_help() {
    echo "Usage: crly [COMMAND] [OPTIONS]

Commands:
  start [service] [version]      Start all services or a specific service with optional version
  stop [service]                 Stop all services or a specific service
  restart [service]              Restart all services or a specific service
  upgrade [version]              Verify and pull latest images for all services
  update [component]             Update specified component (compose-config, script, or [service])
  logs [service]                 Show logs for all services or a specific service
  verify [service] [version]     Verify container images for all services or a specific service
  cleanup                        Clean up unused Docker resources
  --help, -h                     Show this help message

Arguments:
  [service]                      Optional service name (relayer or dashboard)
  [component]                    Component to update (compose-config, script, relayer, dashboard)
  [version]                      Optional version tag (defaults to 'stable' if not provided)

Examples:
  crly start                     Start all services
  crly start relayer v1.2.3      Start relayer service with version v1.2.3
  crly verify dashboard          Verify dashboard image using 'stable' version
  crly verify relayer v1.2.3     Verify relayer image with version v1.2.3
  crly upgrade                   Upgrade all services to 'stable' version
  crly upgrade v1.2.3            Upgrade all services to version v1.2.3
  crly update compose-config     Update docker-compose.yaml from the repository
  crly update script             Update crly script from the repository
"
}

cd "${CONFIG_DIR}" || exit 1

COMMAND="$1"
shift

if [[ "$COMMAND" == "--help" ]] || [[ "$COMMAND" == "-h" ]]; then
    show_help
    exit 0
fi

case "$COMMAND" in
    verify)
        SERVICE="${1:-all}"
        VERSION="${2:-stable}"
            echo "Verifying image for service '$SERVICE'..."
            case "$SERVICE" in
              relayer)
                IMAGE_NAME="${RELAYER_IMAGE_NAME}"
                REPO_NAME="${RELAYER_REPO_NAME}"
                ;;
              dashboard)
                IMAGE_NAME="${DASHBOARD_IMAGE_NAME}"
                REPO_NAME="${DASHBOARD_REPO_NAME}"
                ;;
              all)
                echo "Verifying images for all services..."
                verify_container "${RELAYER_IMAGE_NAME}" "${VERSION}" "${RELAYER_REPO_NAME}"
                verify_container "${DASHBOARD_IMAGE_NAME}" "${VERSION}" "${DASHBOARD_REPO_NAME}"
                exit 0
                ;;
              *)
                echo "Unknown service: $SERVICE"
                exit 1
                ;;
            esac
            verify_container "${IMAGE_NAME}" "${VERSION}" "${REPO_NAME}"
        ;;
    upgrade)
        SERVICE="${1:-all}"
        VERSION="${2:-stable}"
        case "$SERVICE" in
            relayer)
              IMAGE_NAME="${RELAYER_IMAGE_NAME}"
              REPO_NAME="${RELAYER_REPO_NAME}"
              ;;
            dashboard)
              IMAGE_NAME="${DASHBOARD_IMAGE_NAME}"
              REPO_NAME="${DASHBOARD_REPO_NAME}"
              ;;
            all)
              echo "Verifying and pulling latest images for all services..."
              verify_container "${RELAYER_IMAGE_NAME}" "${VERSION}" "${RELAYER_REPO_NAME}" & \
              verify_container "${DASHBOARD_IMAGE_NAME}" "${VERSION}" "${DASHBOARD_REPO_NAME}"
              wait
              update_image_version "relayer" "${VERSION}"
              update_image_version "dashboard" "${VERSION}"
              ${DOCKER_COMPOSE_COMMAND} up -d --pull always
              exit 0
              ;;
            *)
              echo "Unknown service: $SERVICE"
              exit 1
              ;;
            esac
            verify_container "${IMAGE_NAME}" "${VERSION}" "${REPO_NAME}"
            update_image_version "${SERVICE}" "${VERSION}"
            ${DOCKER_COMPOSE_COMMAND} up -d "$SERVICE" --pull always
        ;;
    start)
        SERVICE="${1:-all}"
        VERSION="${2:-stable}"
        case "$SERVICE" in
            relayer)
                IMAGE_NAME="${RELAYER_IMAGE_NAME}"
                REPO_NAME="${RELAYER_REPO_NAME}"
                ;;
            dashboard)
                IMAGE_NAME="${DASHBOARD_IMAGE_NAME}"
                REPO_NAME="${DASHBOARD_REPO_NAME}"
                ;;
            all)
                echo "Verifying and starting all services..."
                verify_container "${RELAYER_IMAGE_NAME}" "${VERSION}" "${RELAYER_REPO_NAME}" & \
                verify_container "${DASHBOARD_IMAGE_NAME}" "${VERSION}" "${DASHBOARD_REPO_NAME}"
                wait
                ${DOCKER_COMPOSE_COMMAND} up -d
                exit 0
                ;;
            *)
                echo "Unknown service: $SERVICE"
                exit 1
                ;;
            esac
            verify_container "${IMAGE_NAME}" "${VERSION}" "${REPO_NAME}"
            ${DOCKER_COMPOSE_COMMAND} up -d "$SERVICE"
        ;;
    stop)
        SERVICE="${1:-}"
        if [ -n "$SERVICE" ]; then
            echo "Stopping service '$SERVICE'..."
            ${DOCKER_COMPOSE_COMMAND} stop "$SERVICE"
        else
            echo "Stopping all services..."
            ${DOCKER_COMPOSE_COMMAND} stop
        fi
        ;;
    restart)
        SERVICE="${1:-}"
        if [ -n "$SERVICE" ]; then
            echo "Restarting service '$SERVICE'..."
            ${DOCKER_COMPOSE_COMMAND} down "$SERVICE"
            ${DOCKER_COMPOSE_COMMAND} up -d "$SERVICE"
        else
            echo "Restarting all services..."
            ${DOCKER_COMPOSE_COMMAND} down
            ${DOCKER_COMPOSE_COMMAND} up -d
        fi
        ;;
    update)
        SUBCOMMAND="${1:-}"
        case "$SUBCOMMAND" in
            compose-config)
                echo "Updating docker-compose.yaml from the repository..."
                REPO_URL="https://raw.githubusercontent.com/icon-project/relayer-docker/main/docker-compose.yaml"
                curl -sL "${REPO_URL}" -o "${CONFIG_DIR}/docker-compose.yaml"
                echo "docker-compose.yaml has been updated."
                ;;
            script)
                echo "Updating crly script from the repository..."
                SCRIPT_URL="https://raw.githubusercontent.com/icon-project/relayer-docker/main/crly"
                curl -sL "${SCRIPT_URL}" -o "${CONFIG_DIR}/crly.tmp"
                if [ -s "${CONFIG_DIR}/crly.tmp" ]; then
                    mv "${CONFIG_DIR}/crly.tmp" "${CONFIG_DIR}/crly"
                    chmod +x "${CONFIG_DIR}/crly"
                    echo "crly script has been updated."
                else
                    echo "Error: Failed to download the crly script."
                    rm -f "${CONFIG_DIR}/crly.tmp"
                fi
                ;;
            *)
                echo "Unknown command: $SUBCOMMAND"
                show_help
                exit 1
                ;;
        esac
        ;;
    logs)
        SERVICE="${1:-}"
        if [ -n "$SERVICE" ]; then
            echo "Showing logs for service '$SERVICE'..."
            ${DOCKER_COMPOSE_COMMAND} logs -f "$SERVICE"
        else
            echo "Showing logs for all services..."
            ${DOCKER_COMPOSE_COMMAND} logs -f
        fi
        ;;
    cleanup)
      echo "Cleaning up unused Docker resources..."
      docker system prune -f --volumes --all
      ;;
    *)
        CONTAINER_ID=$(${DOCKER_COMPOSE_COMMAND} ps -q relayer)
        if [ -z "$CONTAINER_ID" ]; then
            echo "Relayer service is not running. Starting it..."
            VERSION="$1"
            verify_container "${RELAYER_IMAGE_NAME}" "${VERSION}" "${RELAYER_REPO_NAME}"
            ${DOCKER_COMPOSE_COMMAND} up -d relayer
            sleep 5
            CONTAINER_ID=$(${DOCKER_COMPOSE_COMMAND} ps -q relayer)
        fi

        if [ -z "$CONTAINER_ID" ]; then
            echo "Error: Unable to start relayer service."
            exit 1
        fi

        docker exec -it "$CONTAINER_ID" crly "$COMMAND" "$@"
        ;;
esac